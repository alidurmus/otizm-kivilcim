import { test, expect } from '@playwright/test';

test.describe('ElevenLabs Ses Entegrasyonu', () => {
  test.beforeEach(async ({ page }) => {
    // Mock ElevenLabs API to avoid real API calls during testing
    await page.route('**/v1/text-to-speech/**', route => {
      route.fulfill({
        status: 200,
        contentType: 'audio/mpeg',
        body: Buffer.from('fake-audio-data')
      });
    });
  });

  test('ana sayfa hoÅŸ geldin mesajÄ± test edilmeli', async ({ page }) => {
    await page.goto('/');
    
    // Splash screen'i bekle
    await expect(page.getByText('YÃ¼kleniyor...')).toBeVisible();
    await expect(page.getByRole('heading', { name: 'KÄ±vÄ±lcÄ±m', level: 1 })).toBeVisible({ timeout: 5000 });
    
    // Ses dinleme butonu gÃ¶rÃ¼nÃ¼r olmalÄ±
    await expect(page.getByRole('button', { name: 'ðŸŽµ Dinle' })).toBeVisible();
    
    // ElevenLabs branding kontrol et
    await expect(page.getByText('Powered by ElevenLabs AI')).toBeVisible();
  });

  test('egzersiz sayfasÄ±nda ses Ã¶zellikleri Ã§alÄ±ÅŸmalÄ±', async ({ page }) => {
    await page.goto('/exercise/literacy');
    
    // Hece dinleme butonu gÃ¶rÃ¼nÃ¼r olmalÄ±
    await expect(page.getByRole('button', { name: /ðŸ”Š Heceyi Dinle/ })).toBeVisible();
    
    // Harf kutularÄ±na tÄ±klayabilmeli
    const letterBox = page.getByText('e').first();
    await expect(letterBox).toBeVisible();
    
    // Hover tooltip'i kontrol et
    await letterBox.hover();
    await expect(page.getByText('Dinlemek iÃ§in tÄ±kla')).toBeVisible();
  });

  test('ses butonlarÄ± disabled state\'leri doÄŸru Ã§alÄ±ÅŸmalÄ±', async ({ page }) => {
    await page.goto('/exercise/literacy');
    
    const listenButton = page.getByRole('button', { name: /ðŸ”Š Heceyi Dinle/ });
    
    // Butona tÄ±kla
    await listenButton.click();
    
    // Loading state'i kontrol et (eÄŸer API call simulated olursa)
    // Bu test gerÃ§ek API call yapmadÄ±ÄŸÄ± iÃ§in hemen geÃ§er
    await expect(listenButton).toBeVisible();
  });

  test('harf seslerinin Ã§almasÄ± test edilmeli', async ({ page }) => {
    await page.goto('/exercise/literacy');
    
    // Ä°lk harfe tÄ±kla
    const firstLetter = page.getByText('e').first();
    await firstLetter.click();
    
    // Console log'larÄ± kontrol etmek iÃ§in
    const logs: string[] = [];
    page.on('console', msg => {
      if (msg.type() === 'error') {
        logs.push(msg.text());
      }
    });
    
    // Herhangi bir ses hatasÄ± olmamalÄ±
    await page.waitForTimeout(1000);
    expect(logs.filter(log => log.includes('Harf ses hatasÄ±'))).toHaveLength(0);
  });

  test('API key eksik olduÄŸunda fallback Ã§alÄ±ÅŸmalÄ±', async ({ page }) => {
    // API key'i undefined yap
    await page.addInitScript(() => {
      delete (window as any).process?.env?.NEXT_PUBLIC_ELEVENLABS_API_KEY;
    });
    
    await page.goto('/exercise/literacy');
    
    // Ses butonuna tÄ±kla
    await page.getByRole('button', { name: /ðŸ”Š Heceyi Dinle/ }).click();
    
    // Fallback Ã§alÄ±ÅŸmalÄ± (Web Speech API)
    // Console log'larÄ± kontrol et
    const logs: string[] = [];
    page.on('console', msg => {
      logs.push(msg.text());
    });
    
    await page.waitForTimeout(2000);
    
    // ElevenLabs hatasÄ± olmalÄ± ama fallback Ã§alÄ±ÅŸmalÄ±
    expect(logs.some(log => log.includes('ElevenLabs TTS Error') || log.includes('Ses oluÅŸturulamadÄ±'))).toBeTruthy();
  });

  test('kutlama seslerinin Ã§almasÄ± test edilmeli', async ({ page }) => {
    await page.goto('/exercise/literacy');
    
    // Egzersizi tamamla
    await page.getByText('e').first().dragTo(page.getByText('?').first());
    await page.getByText('l').first().dragTo(page.getByText('?').last());
    
    // BaÅŸarÄ± mesajÄ±nÄ± bekle
    await expect(page.getByText('HarikasÄ±n!')).toBeVisible({ timeout: 5000 });
    
    // Console log'larÄ± kontrol et
    const logs: string[] = [];
    page.on('console', msg => {
      logs.push(msg.text());
    });
    
    await page.waitForTimeout(3000);
    
    // Kutlama ses hatasÄ± olmamalÄ±
    expect(logs.filter(log => log.includes('Kutlama ses hatasÄ±'))).toHaveLength(0);
  });

  test('ses Ã¶zellikleri ipucu mesajlarÄ± gÃ¶rÃ¼nÃ¼r olmalÄ±', async ({ page }) => {
    await page.goto('/exercise/literacy');
    
    // Ä°pucu mesajlarÄ±nÄ± kontrol et
    await expect(page.getByText('ðŸ’¡ Ä°pucu: Harflere tÄ±klayarak seslerini dinleyebilirsin')).toBeVisible();
    await expect(page.getByText('Powered by ElevenLabs AI - TÃ¼rkÃ§e doÄŸal ses teknolojisi')).toBeVisible();
  });

  test('mobil cihazlarda ses Ã¶zellikleri Ã§alÄ±ÅŸmalÄ±', async ({ page }) => {
    await page.setViewportSize({ width: 375, height: 667 });
    await page.goto('/exercise/literacy');
    
    // Mobilde de ses butonlarÄ± gÃ¶rÃ¼nÃ¼r olmalÄ±
    await expect(page.getByRole('button', { name: /ðŸ”Š Heceyi Dinle/ })).toBeVisible();
    
    // Harf kutularÄ±na dokunma
    const letterBox = page.getByText('e').first();
    await letterBox.click();
    
    // Touch-friendly olduÄŸunu kontrol et
    const letterBoxBounds = await letterBox.boundingBox();
    expect(letterBoxBounds?.width).toBeGreaterThanOrEqual(44);
    expect(letterBoxBounds?.height).toBeGreaterThanOrEqual(44);
  });

  test('ses ayarlarÄ± duyusal kontrol panelinde Ã§alÄ±ÅŸmalÄ±', async ({ page }) => {
    await page.goto('/sensory-settings');
    
    // Ses ayarlarÄ± bÃ¶lÃ¼mÃ¼nÃ¼ kontrol et
    await expect(page.getByRole('heading', { name: 'ðŸ”Š Ses AyarlarÄ±' })).toBeVisible();
    
    // Ses efektleri toggle'Ä±nÄ± kontrol et
    const soundToggle = page.locator('button[role="switch"]').first();
    await expect(soundToggle).toBeVisible();
    
    // Toggle'Ä± kapat
    await soundToggle.click();
    
    // AyarÄ±n localStorage'a kaydedildiÄŸini kontrol et
    const isSoundEnabled = await page.evaluate(() => {
      return localStorage.getItem('sound-effects') === 'false';
    });
    expect(isSoundEnabled).toBeTruthy();
  });

  test('farklÄ± ses tÃ¼rleri iÃ§in doÄŸru ayarlar kullanÄ±lmalÄ±', async ({ page }) => {
    await page.goto('/exercise/literacy');
    
    // Network request'leri izle (mock iÃ§in)
    const requests: string[] = [];
    page.on('request', request => {
      if (request.url().includes('text-to-speech')) {
        requests.push(request.url());
      }
    });
    
    // Harf sesini Ã§al
    await page.getByText('e').first().click();
    await page.waitForTimeout(500);
    
    // Hece sesini Ã§al  
    await page.getByRole('button', { name: /ðŸ”Š Heceyi Dinle/ }).click();
    await page.waitForTimeout(500);
    
    // Mock olduÄŸu iÃ§in gerÃ§ek request gitmez ama functionality test edilir
    await expect(page.getByRole('button', { name: /ðŸ”Š Heceyi Dinle/ })).toBeVisible();
  });
}); 