import { test, expect } from '@playwright/test';

test.describe('Admin ElevenLabs Test SayfasÄ±', () => {
  
  test.beforeEach(async ({ page }) => {
    // Mock ElevenLabs API status response
    await page.route('**/api/speech/status', route => {
      route.fulfill({
        status: 200,
        contentType: 'application/json',
        body: JSON.stringify({
          apiKeyConfigured: true,
          sdkInitialized: true,
          lastTestSuccess: true,
          userInfo: {
            name: 'Test User',
            email: 'test@example.com',
            tier: 'free'
          }
        })
      });
    });
    
    await page.route('**/api/speech', route => {
      if (route.request().method() === 'GET') {
        route.fulfill({
          status: 200,
          contentType: 'application/json',
          body: JSON.stringify([
            { id: 'pNInz6obpgDQGcFmaJgB', name: 'Adam', description: 'Sakin ve aÃ§Ä±k konuÅŸan erkek ses' },
            { id: 'EXAVITQu4vr4xnSDxMaL', name: 'Bella', description: 'Nazik ve anlaÅŸÄ±lÄ±r kadÄ±n ses' }
          ])
        });
      } else {
        route.fulfill({
          status: 200,
          contentType: 'audio/mpeg',
          body: Buffer.from('mock-audio-data')
        });
      }
    });
    
    await page.route('**/api/speech/status', route => {
      route.fulfill({
        status: 200,
        contentType: 'application/json',
        body: JSON.stringify({
          apiKeyConfigured: true,
          sdkInitialized: true,
          lastTestSuccess: true,
          userInfo: {
            name: 'Test User',
            email: 'test@example.com',
            tier: 'free'
          }
        })
      });
    });
    
    await page.goto('/admin/elevenlabs-test');
    
    // Wait for page to load
    await expect(page.getByRole('heading', { name: /ElevenLabs API Test Merkezi/i })).toBeVisible();
  });

  test('sayfa baÅŸlÄ±ÄŸÄ± ve temel elementler gÃ¶rÃ¼nmeli', async ({ page }) => {
    // Ana baÅŸlÄ±k
    await expect(page.getByRole('heading', { name: /ElevenLabs API Test Merkezi/i })).toBeVisible();
    
    // Alt baÅŸlÄ±k
    await expect(page.getByText('Resmi SDK ile geliÅŸmiÅŸ ses testi ve analiz')).toBeVisible();
    
    // API referans linki
    await expect(page.getByRole('link', { name: /ElevenLabs API ReferansÄ±/i })).toBeVisible();
    
    // API Durumu baÅŸlÄ±ÄŸÄ±
    await expect(page.getByRole('heading', { name: /API Durumu/i })).toBeVisible();
    
    // Ses Testi baÅŸlÄ±ÄŸÄ±
    await expect(page.getByRole('heading', { name: /Ses Testi/i })).toBeVisible();
  });

  test('API durumu paneli doÄŸru bilgileri gÃ¶stermeli', async ({ page }) => {
    // Wait for API status to load
    await page.waitForTimeout(1000);

    // API Key durumu
    await expect(page.getByText('âœ… YapÄ±landÄ±rÄ±lmÄ±ÅŸ')).toBeVisible();

    // SDK durumu
    await expect(page.getByText('âœ… BaÅŸlatÄ±lmÄ±ÅŸ')).toBeVisible();

    // Son test durumu
    await expect(page.getByText('âœ… BaÅŸarÄ±lÄ±')).toBeVisible();
  });

  test('ses testi paneli bileÅŸenleri gÃ¶rÃ¼nmeli', async ({ page }) => {
    // Wait for components to load
    await page.waitForTimeout(1000);

    // Test metni alanÄ± (label ile kontrol edelim)
    await expect(page.getByText('Test Metni')).toBeVisible();
    const textArea = page.locator('textarea');
    await expect(textArea).toBeVisible();
    await expect(textArea).toHaveValue('Merhaba! Bu ElevenLabs API testi.');

    // Ses seÃ§imi dropdown (label ile kontrol edelim)
    await expect(page.getByText('Ses SeÃ§imi')).toBeVisible();
    const voiceSelect = page.locator('select').first();
    await expect(voiceSelect).toBeVisible();

    // Test tÃ¼rÃ¼ dropdown
    await expect(page.getByText('Test TÃ¼rÃ¼')).toBeVisible();
    const typeSelect = page.locator('select').nth(1);
    await expect(typeSelect).toBeVisible();

    // Test butonu
    await expect(page.getByRole('button', { name: /Test Et/i })).toBeVisible();
  });

  test('test tÃ¼rÃ¼ deÄŸiÅŸtirildiÄŸinde hÄ±zlÄ± test butonlarÄ± gÃ¼ncellenmeli', async ({ page }) => {
    // Wait for page to fully load
    await page.waitForTimeout(1000);

    // Test tÃ¼rÃ¼nÃ¼ letter'a deÄŸiÅŸtir
    const typeSelect = page.locator('select').nth(1);
    await typeSelect.selectOption('letter');

    // HÄ±zlÄ± test bÃ¶lÃ¼mÃ¼nÃ¼n gÃ¶rÃ¼nmesini bekle
    await expect(page.getByText('HÄ±zlÄ± Test')).toBeVisible();
    
    // Letter butonlarÄ±nÄ±n gÃ¶rÃ¼nmesini bekle (dinamik iÃ§erik olduÄŸu iÃ§in genel kontrol)
    await expect(page.locator('.flex.flex-wrap.gap-2 button').first()).toBeVisible();
  });

  test('hÄ±zlÄ± test butonu test metnini gÃ¼ncellenmeli', async ({ page }) => {
    // Wait for page to load
    await page.waitForTimeout(1000);

    // Ä°lk hÄ±zlÄ± test butonuna tÄ±kla
    const firstQuickButton = page.locator('.flex.flex-wrap.gap-2 button').first();
    await firstQuickButton.click();

    // Test metninin gÃ¼ncellendiÄŸini kontrol et
    const textArea = page.locator('textarea');
    await expect(textArea).not.toHaveValue('Merhaba! Bu ElevenLabs API testi.');
  });

  test('test metni boÅŸ olduÄŸunda hata mesajÄ± gÃ¶sterilmeli', async ({ page }) => {
    // Wait for page to load
    await page.waitForTimeout(1000);

    // Test metnini temizle
    const textArea = page.locator('textarea');
    await textArea.clear();

    // Test butonuna tÄ±kla
    await page.getByRole('button', { name: /Test Et/i }).click();

    // Hata mesajÄ±nÄ±n gÃ¶sterilmesini bekle
    await expect(page.getByText('LÃ¼tfen test metni girin')).toBeVisible();
  });

  test('baÅŸarÄ±lÄ± test sonrasÄ± sonuÃ§lar tablosuna eklenmeli', async ({ page }) => {
    // Wait for page to load
    await page.waitForTimeout(1000);

    // Test butonuna tÄ±kla
    await page.getByRole('button', { name: /Test Et/i }).click();

    // Test durumunun deÄŸiÅŸmesini bekle
    await expect(page.getByRole('button', { name: /Test Ediliyor/i })).toBeVisible();

    // Test sonuÃ§larÄ± tablosunun gÃ¶rÃ¼nmesini bekle
    await expect(page.getByRole('heading', { name: /Test SonuÃ§larÄ±/i })).toBeVisible();
    
    // Tablonun var olduÄŸunu kontrol et
    await expect(page.locator('table')).toBeVisible();
  });

  test('farklÄ± ses seÃ§enekleri mevcut olmalÄ±', async ({ page }) => {
    // Wait for voices to load
    await page.waitForTimeout(2000);

    // Ses seÃ§imi dropdown'unu aÃ§
    const voiceSelect = page.locator('select').first();
    await voiceSelect.click();

    // Mock'lanan sesler gÃ¶rÃ¼nmeli (option'lar dropdown iÃ§inde olduÄŸu iÃ§in farklÄ± yaklaÅŸÄ±m)
    const options = page.locator('select option');
    await expect(options).toHaveCount(2); // 2 mock voice expected
  });

  test('test tÃ¼rÃ¼ seÃ§enekleri doÄŸru olmalÄ±', async ({ page }) => {
    // Test tÃ¼rÃ¼ dropdown'unu aÃ§
    const typeSelect = page.locator('select').nth(1);
    
    // Option'larÄ±n mevcut olduÄŸunu kontrol et
    await expect(typeSelect.locator('option[value="letter"]')).toHaveText('Harf');
    await expect(typeSelect.locator('option[value="word"]')).toHaveText('Kelime');
    await expect(typeSelect.locator('option[value="sentence"]')).toHaveText('CÃ¼mle');
    await expect(typeSelect.locator('option[value="celebration"]')).toHaveText('Kutlama');
  });

  test('uzun test metni iÃ§in karakter sÄ±nÄ±rÄ± kontrolÃ¼ yapÄ±lmalÄ±', async ({ page }) => {
    // Wait for page to load
    await page.waitForTimeout(1000);

    const longText = 'A'.repeat(1000); // 1000 karakter
    const textArea = page.locator('textarea');

    await textArea.clear();
    await textArea.fill(longText);

    // Test butonuna tÄ±kla
    await page.getByRole('button', { name: /Test Et/i }).click();

    // Uzun metin iÃ§in uyarÄ± veya iÅŸlem yapÄ±lmalÄ±
    // (Bu sayfada sÄ±nÄ±r yok gibi gÃ¶rÃ¼nÃ¼yor, ama test ediyoruz)
    await page.waitForTimeout(1000);
  });

  test('keyboard navigasyonu Ã§alÄ±ÅŸmalÄ±', async ({ page }) => {
    // Sayfa odaklanmalÄ±
    await page.focus('body');
    
    // Tab ile elementler arasÄ±nda geÃ§iÅŸ
    await page.keyboard.press('Tab'); // API referans linki
    await page.keyboard.press('Tab'); // Textarea
    
    const textArea = page.locator('textarea');
    await expect(textArea).toBeFocused();
  });

  test('aria etiketleri ve eriÅŸilebilirlik kontrolleri', async ({ page }) => {
    // Form elemanlarÄ±nÄ±n uygun etiketleri olmalÄ±
    await expect(page.getByText('Test Metni')).toBeVisible();
    await expect(page.getByText('Ses SeÃ§imi')).toBeVisible();
    await expect(page.getByText('Test TÃ¼rÃ¼')).toBeVisible();

    // Dropdown'larÄ±n uygun eriÅŸilebilirlik etiketleri olmalÄ±
    const voiceSelect = page.locator('select').first();
    await expect(voiceSelect).toBeVisible();
    
    const typeSelect = page.locator('select').nth(1);
    await expect(typeSelect).toBeVisible();
  });

  test('test sonuÃ§larÄ± doÄŸru sÄ±rada gÃ¶rÃ¼ntÃ¼lenmeli', async ({ page }) => {
    // Wait for page to load
    await page.waitForTimeout(1000);

    // Ä°lk test
    await page.locator('textarea').fill('Test 1');
    await page.getByRole('button', { name: /Test Et/i }).click();

    // Test tamamlanmasÄ±nÄ± bekle
    await page.waitForTimeout(2000);

    // Ä°kinci test
    await page.locator('textarea').fill('Test 2');
    await page.getByRole('button', { name: /Test Et/i }).click();

    // Test tamamlanmasÄ±nÄ± bekle
    await page.waitForTimeout(2000);

    // SonuÃ§larÄ±n gÃ¶rÃ¼nmesini bekle
    if (await page.getByText('ğŸ“ˆ Test SonuÃ§larÄ±').isVisible()) {
      // En son test en Ã¼stte olmalÄ±
      const firstRow = page.locator('tbody tr').first();
      await expect(firstRow).toContainText('Test 2');
    }
  });
}); 