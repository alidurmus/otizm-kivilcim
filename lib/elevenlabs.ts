// ElevenLabs Client-Side Integration (Server Proxy Only)
// Uses Next.js API routes for secure server-side processing
// with Static Audio Files fallback for better performance

import { getStaticAudioPath, turkishToFilename } from './audio-constants';

// Error classes for better error handling
class ElevenLabsAPIError extends Error {
  constructor(message: string, public readonly status: number, public readonly responseText?: string) {
    super(message);
    this.name = 'ElevenLabsAPIError';
  }
}

class ElevenLabsPlaybackError extends Error {
  constructor(message: string, public readonly audioUrl?: string) {
    super(message);
    this.name = 'ElevenLabsPlaybackError';
  }
}

// T√ºrk√ße Bayan Ses K√ºt√ºphanesi - Otizm dostu ses se√ßenekleri
export const TURKISH_FEMALE_VOICES = {
  bella: {
    id: 'EXAVITQu4vr4xnSDxMaL',
    name: 'Bella',
    description: 'Nazik ve sakin bayan ses - harf √∂ƒürenme i√ßin ideal',
    language: 'tr',
    gender: 'female',
    age: 'adult',
    traits: ['calm', 'clear', 'gentle'],
    bestFor: ['letters', 'words', 'instructions']
  },
  rachel: {
    id: '21m00Tcm4TlvDq8ikWAM',
    name: 'Rachel',
    description: 'Profesyonel ve g√ºven verici bayan ses',
    language: 'tr',
    gender: 'female', 
    age: 'adult',
    traits: ['professional', 'trustworthy', 'clear'],
    bestFor: ['sentences', 'stories', 'explanations']
  },
  domi: {
    id: 'AZnzlk1XvdvUeBnXmlld', 
    name: 'Domi',
    description: 'Gen√ß ve arkada≈ü canlƒ±sƒ± bayan ses',
    language: 'tr',
    gender: 'female',
    age: 'young',
    traits: ['friendly', 'energetic', 'approachable'],
    bestFor: ['games', 'encouragement', 'social']
  },
  elli: {
    id: 'MF3mGyEYCl7XYWbV9V6O',
    name: 'Elli',
    description: 'Enerjik ve kutlayƒ±cƒ± bayan ses',
    language: 'tr',
    gender: 'female',
    age: 'adult',
    traits: ['energetic', 'celebrating', 'motivating'],
    bestFor: ['celebrations', 'achievements', 'rewards']
  },
  sarah: {
    id: 'EaWgGVAA2Kzl8LLxQN8D',
    name: 'Sarah',
    description: '√áok sakin ve rahatlatƒ±cƒ± bayan ses',
    language: 'tr',
    gender: 'female',
    age: 'adult',
    traits: ['very_calm', 'soothing', 'therapeutic'],
    bestFor: ['relaxation', 'sensitive_content', 'therapy']
  },
  // Yeni eklenen sesler - detaylar API'den alƒ±nacak
  newVoice1: {
    id: 'tMlsw9ihFf5L7S43dohH',
    name: 'NewVoice1',
    description: 'Yeni eklenen ses - detaylar g√ºncellenecek',
    language: 'tr',
    gender: 'female', // API'den g√ºncellenecek
    age: 'adult',
    traits: ['unknown'],
    bestFor: ['general']
  },
  newVoice2: {
    id: 'xyqF3vGMQlPk3e7yA4DI',
    name: 'Varsayƒ±lan Ses', // Kullanƒ±cƒ±nƒ±n tercih ettiƒüi ses
    description: 'Kullanƒ±cƒ± tarafƒ±ndan se√ßilen varsayƒ±lan T√ºrk√ße ses - t√ºm konu≈ümalar i√ßin',
    language: 'tr',
    gender: 'female', // API'den g√ºncellenecek
    age: 'adult',
    traits: ['preferred', 'default', 'clear'],
    bestFor: ['letters', 'words', 'sentences', 'celebrations', 'all_content']
  },
  newVoice3: {
    id: '9GYMX9eMWSq1yjiwXb7B',
    name: 'NewVoice3',
    description: 'Yeni eklenen ses - detaylar g√ºncellenecek',
    language: 'tr',
    gender: 'female', // API'den g√ºncellenecek
    age: 'adult',
    traits: ['unknown'],
    bestFor: ['general']
  }
};

// T√ºrk√ße Erkek Ses K√ºt√ºphanesi - Otizm dostu ses se√ßenekleri
export const TURKISH_MALE_VOICES = {
  adam: {
    id: 'pNInz6obpgDQGcFmaJgB',
    name: 'Adam',
    description: 'Sakin ve a√ßƒ±k erkek ses - temel √∂ƒürenme i√ßin m√ºkemmel',
    language: 'tr',
    gender: 'male',
    age: 'adult',
    traits: ['calm', 'clear', 'reliable'],
    bestFor: ['instructions', 'basic_learning', 'guidance']
  },
  josh: {
    id: 'VR6AewLTigWG4xSOukaG',
    name: 'Josh',
    description: 'Gen√ß ve eƒülenceli erkek ses - oyunlar i√ßin ideal',
    language: 'tr',
    gender: 'male',
    age: 'young',
    traits: ['playful', 'energetic', 'fun'],
    bestFor: ['games', 'activities', 'entertainment']
  },
  antoni: {
    id: 'ErXwobaYiN019PkySvjV',
    name: 'Antoni',
    description: 'Derin ve g√ºven verici erkek ses - hikayeler i√ßin',
    language: 'tr',
    gender: 'male',
    age: 'adult',
    traits: ['deep', 'trustworthy', 'narrative'],
    bestFor: ['stories', 'reading', 'explanations']
  },
  daniel: {
    id: 'onwK4e9ZLuTAKqWW03F9',
    name: 'Daniel',
    description: 'Profesyonel ve sakin erkek ses',
    language: 'tr',
    gender: 'male',
    age: 'adult', 
    traits: ['professional', 'calm', 'authoritative'],
    bestFor: ['lessons', 'formal_content', 'instructions']
  },
  ethan: {
    id: 'g5CIjZEefAph4nQFvHAz',
    name: 'Ethan',
    description: 'Cesaret verici ve motive edici erkek ses',
    language: 'tr',
    gender: 'male',
    age: 'adult',
    traits: ['encouraging', 'motivating', 'supportive'],
    bestFor: ['encouragement', 'motivation', 'challenges']
  },
  // Yeni eklenen sesler - detaylar API'den alƒ±nacak
  newVoice4: {
    id: 'V6TFTAE0gaN8LtBwl70x',
    name: 'NewVoice4',
    description: 'Yeni eklenen ses - detaylar g√ºncellenecek',
    language: 'tr',
    gender: 'male', // API'den g√ºncellenecek
    age: 'adult',
    traits: ['unknown'],
    bestFor: ['general']
  },
  newVoice5: {
    id: 'eUUtjbi66JcWz3T4Gvvo',
    name: 'NewVoice5',
    description: 'Yeni eklenen ses - detaylar g√ºncellenecek',
    language: 'tr',
    gender: 'male', // API'den g√ºncellenecek
    age: 'adult',
    traits: ['unknown'],
    bestFor: ['general']
  },
  newVoice6: {
    id: 'mBUB5zYuPwfVE6DTcEjf',
    name: 'NewVoice6',
    description: 'Yeni eklenen ses - detaylar g√ºncellenecek',
    language: 'tr',
    gender: 'male', // API'den g√ºncellenecek
    age: 'adult',
    traits: ['unknown'],
    bestFor: ['general']
  },
  newVoice7: {
    id: 'jbJMQWv1eS4YjQ6PCcn6',
    name: 'NewVoice7',
    description: 'Yeni eklenen ses - detaylar g√ºncellenecek',
    language: 'tr',
    gender: 'male', // API'den g√ºncellenecek
    age: 'adult',
    traits: ['unknown'],
    bestFor: ['general']
  }
};

// 5 Se√ßilmi≈ü T√ºrk√ße Ses Sistemi (Multi-Voice Support)
const SELECTED_TURKISH_VOICES = {
  gulsu: {
    id: 'jbJMQWv1eS4YjQ6PCcn6',
    name: 'G√ºlsu',
    description: 'Gen√ß T√ºrk kadƒ±nƒ±, enerjik ve samimi ses. Hikayeler ve kitaplar i√ßin m√ºkemmel.',
    language: 'tr',
    gender: 'female',
    age: 'young_adult',
    traits: ['energetic', 'sincere', 'clear'],
    bestFor: ['stories', 'books', 'children_content', 'alphabet_learning']
  },
  edaAtlas: {
    id: 'mBUB5zYuPwfVE6DTcEjf',
    name: 'Eda Atlas',
    description: 'Gen√ß, parlak T√ºrk kadƒ±nƒ± sesi. Kurumsal, radyo ve TV reklamlarƒ± i√ßin m√ºkemmel se√ßim.',
    language: 'tr',
    gender: 'female',
    age: 'young_adult',
    traits: ['bright', 'professional', 'corporate'],
    bestFor: ['corporate', 'radio', 'tv_commercials', 'word_learning']
  },
  ayca: {
    id: 'eUUtjbi66JcWz3T4Gvvo',
    name: 'Ay√ßa',
    description: 'Dinamik gen√ß kadƒ±n sesi. Anlatƒ±cƒ±lar ve motivasyonel konu≈ümalar i√ßin uygun.',
    language: 'tr',
    gender: 'female',
    age: 'young_adult',
    traits: ['dynamic', 'motivational', 'narrator'],
    bestFor: ['narrator', 'motivational_speech', 'sentence_reading']
  },
  yusufSuratli: {
    id: 'V6TFTAE0gaN8LtBwl70x',
    name: 'Yusuf Suratlƒ±',
    description: 'Parlak, gen√ß yeti≈ükin erkek sesi. Anlatƒ±cƒ±, konu≈ümacƒ±, kitap seslendirme i√ßin m√ºkemmel.',
    language: 'tr',
    gender: 'male',
    age: 'young_adult',
    traits: ['bright', 'narrator', 'speaker'],
    bestFor: ['narrator', 'speaker', 'book_voiceover', 'celebrations']
  },
  sermin: {
    id: '9GYMX9eMWSq1yjiwXb7B',
    name: 'Sermin',
    description: 'Orijinal, akƒ±cƒ± ve vurgulu T√ºrk√ße kadƒ±n sesi.',
    language: 'tr',
    gender: 'female',
    age: 'adult',
    traits: ['original', 'fluent', 'accented'],
    bestFor: ['fluent_expressions', 'accented_content', 'natural_speech']
  },
  cavit: {
    id: 'Y2T2O1csKPgWgyuKcU0a',
    name: 'Cavit',
    description: 'G√º√ßl√º ve net erkek sesi. Profesyonel anlatƒ±m ve eƒüitici i√ßerikler i√ßin ideal.',
    language: 'tr',
    gender: 'male',
    age: 'adult',
    traits: ['strong', 'clear', 'professional'],
    bestFor: ['educational_content', 'professional_narration', 'announcements', 'instructions']
  },
  mehmet: {
    id: 'fg8pljYEn5ahwjyOQaro',
    name: 'Mehmet',
    description: 'Samimi ve sƒ±cak erkek sesi. G√ºnl√ºk konu≈ümalar ve √ßocuk eƒüitimi i√ßin uygun.',
    language: 'tr',
    gender: 'male',
    age: 'adult',
    traits: ['friendly', 'warm', 'child_friendly'],
    bestFor: ['daily_conversations', 'child_education', 'friendly_narration', 'encouragement']
  }
};

// Ses tipi i√ßin en uygun T√ºrk√ße bayan sesini √∂ner
export function getRecommendedTurkishVoice(
  type: 'letter' | 'word' | 'sentence' | 'celebration',
  gender: 'male' | 'female' | 'mixed' = 'mixed'
): string {
  // üéØ Kullanƒ±cƒ±nƒ±n tercih ettiƒüi varsayƒ±lan ses - t√ºm konu≈ümalar i√ßin
  const userPreferredVoice = 'xyqF3vGMQlPk3e7yA4DI';
  
  console.log(`üîä Using user's preferred voice: ${userPreferredVoice} for ${type}`);
  return userPreferredVoice;
  
  // Eski gender-balanced logic - ≈üimdilik devre dƒ±≈üƒ±
  /*
  const voiceAssignments = {
    'letter': gender === 'female' ? TURKISH_FEMALE_VOICES.bella.id : TURKISH_MALE_VOICES.adam.id,
    'word': TURKISH_FEMALE_VOICES.rachel.id,
    'sentence': TURKISH_MALE_VOICES.antoni.id,
    'celebration': TURKISH_MALE_VOICES.josh.id
  };
  
  return voiceAssignments[type];
  */
}

// T√ºm T√ºrk√ße bayan seslerini listele
export function getTurkishFemaleVoices() {
  return Object.values(TURKISH_FEMALE_VOICES);
}

// T√ºm T√ºrk√ße erkek seslerini listele
export function getTurkishMaleVoices() {
  return Object.values(TURKISH_MALE_VOICES);
}

// T√ºm T√ºrk√ße sesleri d√∂nd√ºr√ºr (erkek + bayan)
export function getAllTurkishVoices() {
  return [
    ...getTurkishFemaleVoices(),
    ...getTurkishMaleVoices()
  ];
}

// Client-side ElevenLabs integration using server proxy
class ElevenLabsClient {
  private defaultVoiceId: string = 'xyqF3vGMQlPk3e7yA4DI'; // Kullanƒ±cƒ±nƒ±n se√ßtiƒüi varsayƒ±lan ses
  private cache: Map<string, { blob: Blob; timestamp: number }> = new Map(); // Cache audio blobs with timestamps
  private currentAudio: HTMLAudioElement | null = null; // Aktif ses instance'ƒ±nƒ± takip et
  private readonly CACHE_DURATION = 30 * 60 * 1000; // 30 minutes cache duration

  constructor() {
    console.log('üéôÔ∏è ElevenLabs client initialized');
  }

  /**
   * Aktif sesi durdur ve temizle
   */
  stopCurrentAudio(): void {
    if (this.currentAudio) {
      console.log('üõë Stopping current audio');
      
      try {
        // Ses √ßalarken durdurma
        if (!this.currentAudio.paused) {
          this.currentAudio.pause();
        }
        
        // Zamanƒ± sƒ±fƒ±rla
        this.currentAudio.currentTime = 0;
        
        // Event listener'larƒ± temizle
        this.currentAudio.onended = null;
        this.currentAudio.onerror = null;
        this.currentAudio.onabort = null;
        this.currentAudio.oncanplay = null;
        this.currentAudio.onloadstart = null;
        
      } catch (error) {
        console.warn('Error stopping audio (ignored):', error);
      } finally {
        // Reference'ƒ± her durumda temizle
        this.currentAudio = null;
      }
    }
  }

  private isCacheValid(timestamp: number): boolean {
    return Date.now() - timestamp < this.CACHE_DURATION;
  }

  private cleanExpiredCache(): void {
    const now = Date.now();
    for (const [key, { timestamp }] of this.cache.entries()) {
      if (now - timestamp > this.CACHE_DURATION) {
        this.cache.delete(key);
      }
    }
  }

  /**
   * Metni sese √ßevirir ve audio URL d√∂nd√ºr√ºr
   * T√ºrk√ße karakterleri destekler: √ß, ƒü, ƒ±, √∂, ≈ü, √º
   * Server-side API route kullanƒ±r - g√ºvenli ve optimize
   */
  async textToSpeech(
    text: string, 
    type: 'letter' | 'word' | 'sentence' | 'celebration' = 'sentence',
    voiceId?: string
  ): Promise<string> {
    // Input validation
    if (!text || text.trim().length === 0) {
      throw new Error('Metin bo≈ü olamaz');
    }

    if (text.length > 1000) {
      throw new Error('Metin √ßok uzun (maksimum 1000 karakter)');
    }

    // Updated Turkish character validation - includes apostrophes, numbers and common punctuation
    const turkishPattern = /^[a-zA-Z0-9√ßƒüƒ±√∂≈ü√º√áƒûIƒ∞√ñ≈û√ú\s.,!?'\"'-]+$/;
    if (!turkishPattern.test(text)) {
      console.warn('Text contains non-Turkish characters:', text);
      // Don't block - just warn and continue
    }

    // 1. √ñNCE: Statik ses dosyasƒ±nƒ± kontrol et
    const staticAudioPath = getStaticAudioPath(text, type);
    if (staticAudioPath) {
      console.log(`üìÅ Using static audio file for "${text}":`, staticAudioPath);
      return staticAudioPath;
    }

    // 2. CACHE kontrol√º - clean expired entries first
    this.cleanExpiredCache();
    const cacheKey = `${text}-${type}-${voiceId || this.defaultVoiceId}`;
    const cachedData = this.cache.get(cacheKey);
    
    if (cachedData && this.isCacheValid(cachedData.timestamp)) {
      console.log(`üíæ Using cached audio for "${text}"`);
      // Create a new blob URL each time to avoid revocation issues
      return URL.createObjectURL(cachedData.blob);
    }

    // 3. SERVER-SIDE API route kullan (ElevenLabs SDK proxy)
    try {
      console.log(`ü§ñ Generating audio via ElevenLabs for Turkish text: "${text}"`);
      const response = await fetch('/api/speech', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          text,
          type,
          voiceId: voiceId || this.defaultVoiceId,
          language: 'tr' // Turkish language indicator
        })
      });

      if (!response.ok) {
        const errorText = await response.text().catch(() => 'Unknown error');
        throw new ElevenLabsAPIError(
          `API isteƒüi ba≈üarƒ±sƒ±z: ${response.status}`,
          response.status,
          errorText
        );
      }

      // Convert response to blob
      const audioBlob = await response.blob();
      
      // Cache the blob data with timestamp
      this.cache.set(cacheKey, {
        blob: audioBlob,
        timestamp: Date.now()
      });
      
      // Create URL for immediate use
      const audioUrl = URL.createObjectURL(audioBlob);
      
      console.log(`‚úÖ Turkish audio generated successfully for: "${text}"`);
      return audioUrl;

    } catch (error) {
      console.error('ElevenLabs API error for Turkish text:', error);
      throw error;
    }
  }

  /**
   * Sesi √ßalar ve cleanup yapar
   * T√ºrk√ße karakterli metinler i√ßin optimize edilmi≈ü
   */
  async speak(
    text: string, 
    type: 'letter' | 'word' | 'sentence' | 'celebration' = 'sentence',
    voiceId?: string
  ): Promise<void> {
    try {
      // üõë √ñnceki sesi durdur - ses karƒ±≈üƒ±klƒ±ƒüƒ±nƒ± √∂nle
      this.stopCurrentAudio();
      
      // Browser'ƒ±n audio state'ini stabilize etmesi i√ßin daha uzun delay
      await new Promise(resolve => setTimeout(resolve, 150));
      
      console.log(`üîä Speaking: "${text}" (type: ${type})`);
      
      const audioUrl = await this.textToSpeech(text, type, voiceId);
      
      // Check if we got a valid audio URL
      if (!audioUrl || audioUrl === '') {
        console.warn('No audio URL returned, falling back to Web Speech API');
        return this.fallbackToWebSpeech(text);
      }
      
      // Audio element olu≈ütur ve aktif instance olarak kaydet
      const audio = new Audio(audioUrl);
      audio.volume = 0.8;
      this.currentAudio = audio;
      
      return new Promise((resolve, reject) => {
        // Null check - audio durdurulmu≈üsa promise'i resolve et
        if (!this.currentAudio) {
          console.log('üö´ Audio was stopped before playback');
          if (audioUrl.startsWith('blob:')) {
            URL.revokeObjectURL(audioUrl);
          }
          resolve();
          return;
        }
        
        audio.onended = () => {
          console.log('‚úÖ Audio playback completed');
          // Cleanup blob URL to prevent memory leaks
          if (audioUrl.startsWith('blob:')) {
            URL.revokeObjectURL(audioUrl);
          }
          
          // Sadece bu audio hala aktifse temizle
          if (this.currentAudio === audio) {
            this.currentAudio = null;
          }
          resolve();
        };
        
        audio.onerror = (error) => {
          console.warn('üîä Audio playback failed, falling back to Web Speech API:', error);
          if (audioUrl.startsWith('blob:')) {
            URL.revokeObjectURL(audioUrl);
          }
          
          // Sadece bu audio hala aktifse temizle
          if (this.currentAudio === audio) {
            this.currentAudio = null;
          }
          
          // Fallback to Web Speech API instead of rejecting
          this.fallbackToWebSpeech(text).then(resolve).catch(reject);
        };
        
        audio.onabort = () => {
          console.warn('üîä Audio playback aborted');
          if (audioUrl.startsWith('blob:')) {
            URL.revokeObjectURL(audioUrl);
          }
          
          // Sadece bu audio hala aktifse temizle
          if (this.currentAudio === audio) {
            this.currentAudio = null;
          }
          
          // Graceful resolution instead of rejection
          resolve();
        };
        
        // Audio √ßalmaya ba≈üla - error handling ile
        audio.play().catch((playError) => {
          console.warn('üîÑ Audio play was interrupted, retrying with Web Speech API', playError);
          
          // Cleanup
          if (audioUrl.startsWith('blob:')) {
            URL.revokeObjectURL(audioUrl);
          }
          
          if (this.currentAudio === audio) {
            this.currentAudio = null;
          }
          
          // Fallback instead of failure
          this.fallbackToWebSpeech(text).then(resolve).catch(reject);
        });
      });
      
    } catch (error) {
      console.error('ElevenLabs speak error:', error);
      // Fallback to Web Speech API on any error
      return this.fallbackToWebSpeech(text);
    }
  }

  /**
   * Web Speech API fallback function
   */
  private async fallbackToWebSpeech(text: string): Promise<void> {
    return new Promise((resolve, reject) => {
      if ('speechSynthesis' in window) {
        // √ñnceki konu≈ümalarƒ± durdur
        speechSynthesis.cancel();
        
        const utterance = new SpeechSynthesisUtterance(text);
        utterance.lang = 'tr-TR';
        utterance.rate = 0.8;
        utterance.pitch = 1.0;
        utterance.volume = 0.8;
        
        utterance.onend = () => {
          console.log('‚úÖ Web Speech API playback completed');
          resolve();
        };
        
        utterance.onerror = (error) => {
          // Handle empty or malformed error objects gracefully
          let errorMsg = 'Unknown error';
          
          try {
            // SpeechSynthesisErrorEvent has an 'error' property with the error type
            if (error && typeof error === 'object' && 'error' in error) {
              errorMsg = error.error || 'Speech synthesis failed';
            } else if (typeof error === 'string') {
              errorMsg = error;
            }
          } catch (e) {
            errorMsg = 'Speech synthesis error (malformed error object)';
          }
          
          console.warn(`üîä Web Speech API fallback failed: ${errorMsg}`);
          
          // Don't reject, just resolve silently to avoid breaking the UI
          resolve();
        };
        
        speechSynthesis.speak(utterance);
      } else {
        console.warn('Speech synthesis not supported, playing silently');
        // Resolve after a short delay to simulate speech duration
        setTimeout(resolve, Math.max(500, text.length * 100));
      }
    });
  }

  /**
   * Mevcut sesleri listeler - hem yerle≈üik hem de yeni eklenen sesler
   */
  async getVoices() {
    try {
      // √ñnce yerle≈üik voice'larƒ± al
      const response = await fetch('/api/speech', {
        method: 'GET',
      });

      let builtInVoices = [];
      if (response.ok) {
        const data = await response.json();
        builtInVoices = data.voices || [];
      }

      // Sonra yeni voice'larƒ± da √ßekmeye √ßalƒ±≈ü
      try {
        const newVoicesResponse = await fetch('/api/speech/voices');
        if (newVoicesResponse.ok) {
          const newVoicesData = await newVoicesResponse.json();
          const newVoices = (newVoicesData.newVoices || []).map((voice: any) => ({
            id: voice.id,
            name: voice.name,
            description: voice.description,
            language: voice.language || 'tr',
            gender: this.detectGenderFromName(voice.name) || 'unknown',
            category: voice.category || 'unknown',
            isVerified: voice.isVerified || false,
            isNew: true, // Yeni voice'larƒ± i≈üaretle
            traits: ['new_voice'],
            bestFor: ['general']
          }));

          console.log(`üÜï Found ${newVoices.length} new voices`);
          
          // Duplicate voice'larƒ± filtrele - unique ID'leri kullan
          const allVoices = [...builtInVoices];
          const existingIds = new Set(builtInVoices.map((v: any) => v.id));
          
          newVoices.forEach((newVoice: any) => {
            if (!existingIds.has(newVoice.id)) {
              allVoices.push(newVoice);
              existingIds.add(newVoice.id);
              console.log(`‚ûï Added unique new voice: ${newVoice.name} (${newVoice.id})`);
            } else {
              console.log(`‚ö†Ô∏è Skipping duplicate voice: ${newVoice.name} (${newVoice.id})`);
            }
          });
          
          console.log(`üìä Final voice count: ${allVoices.length} (${builtInVoices.length} built-in + ${allVoices.length - builtInVoices.length} new)`);
          
          return allVoices;
        }
      } catch (newVoicesError) {
        console.warn('New voices could not be fetched:', newVoicesError);
      }

      // Sadece yerle≈üik voice'larƒ± d√∂nd√ºr
      return builtInVoices;
      
    } catch (error) {
      console.error('Voices API error:', error);
      // Fallback: En azƒ±ndan yerle≈üik voice'larƒ± d√∂nd√ºr
      return getAllTurkishVoices();
    }
  }

  /**
   * Voice isminden cinsiyet tahmin et (yardƒ±mcƒ± fonksiyon)
   */
  private detectGenderFromName(name: string): 'male' | 'female' | 'unknown' {
    const maleNames = ['adam', 'josh', 'antoni', 'daniel', 'ethan', 'marcus', 'david', 'mike', 'john'];
    const femaleNames = ['bella', 'rachel', 'domi', 'elli', 'sarah', 'alice', 'anna', 'emma', 'sophia'];
    
    const lowerName = name.toLowerCase();
    
    if (maleNames.some(male => lowerName.includes(male))) return 'male';
    if (femaleNames.some(female => lowerName.includes(female))) return 'female';
    
    return 'unknown';
  }

  /**
   * Ses test fonksiyonu - admin panel i√ßin
   * T√ºrk√ße karakter testleri dahil
   */
  async testVoice(
    text: string,
    voiceId: string,
    type: 'letter' | 'word' | 'sentence' | 'celebration',
    settings?: {
      stability?: number;
      similarityBoost?: number;
      style?: number;
      useSpeakerBoost?: boolean;
    }
  ) {
    try {
      console.log(`üß™ Testing Turkish voice for: "${text}"`);
      const startTime = Date.now();
      
      // Use the main /api/speech endpoint instead of /api/speech/test
      const response = await fetch('/api/speech', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          text,
          voiceId,
          type,
          settings: {
            stability: settings?.stability ?? 0.7,
            similarity_boost: settings?.similarityBoost ?? 0.8,
            style: settings?.style ?? 0.5,
            use_speaker_boost: settings?.useSpeakerBoost ?? true
          },
          language: 'tr'
        })
      });

      const duration = Date.now() - startTime;

      if (!response.ok) {
        const errorText = await response.text();
        return {
          success: false,
          error: `Test failed: ${response.status} - ${errorText}`,
          duration,
          text,
          voiceId,
          turkishCharacterSupport: /[√ßƒüƒ±√∂≈ü√º√áƒûIƒ∞√ñ≈û√ú]/.test(text)
        };
      }

      const audioBlob = await response.blob();
      const audioUrl = URL.createObjectURL(audioBlob);

      return {
        success: true,
        audioUrl,
        duration,
        text,
        voiceId,
        audioSize: audioBlob.size,
        turkishCharacterSupport: /[√ßƒüƒ±√∂≈ü√º√áƒûIƒ∞√ñ≈û√ú]/.test(text),
        filename: turkishToFilename(text) + '.mp3'
      };

    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error',
        text,
        voiceId,
        turkishCharacterSupport: /[√ßƒüƒ±√∂≈ü√º√áƒûIƒ∞√ñ≈û√ú]/.test(text)
      };
    }
  }

  /**
   * API durumunu kontrol eder
   */
  async getApiStatus() {
    try {
      // Use the main /api/speech GET endpoint to check status
      const response = await fetch('/api/speech', {
        method: 'GET',
      });
      
      if (!response.ok) {
        return {
          apiKeyConfigured: false,
          sdkInitialized: false,
          lastTestSuccess: false,
          error: `HTTP ${response.status}`,
          turkish_support: false
        };
      }

      const data = await response.json();
      return {
        apiKeyConfigured: data.configured || false,
        sdkInitialized: data.configured || false,
        lastTestSuccess: true,
        turkish_support: true, // Our implementation supports Turkish
        voices: data.voices || [],
        service: data.service || 'ElevenLabs'
      };
    } catch (error) {
      return {
        apiKeyConfigured: false,
        sdkInitialized: false,
        lastTestSuccess: false,
        error: error instanceof Error ? error.message : 'Network error',
        turkish_support: false
      };
    }
  }

  /**
   * Cache'i temizle
   */
  clearCache() {
    // Clear all cached blob data (no need to revoke URLs since we create them on-demand)
    this.cache.clear();
    console.log('üßπ ElevenLabs cache cleared');
  }
}

// Global instance - singleton pattern
const elevenLabsClient = new ElevenLabsClient();

// Export client and utility functions
export default elevenLabsClient;
export { ElevenLabsAPIError, ElevenLabsPlaybackError };

// Multi-voice selection function
export function getSelectedTurkishVoices() {
  return Object.values(SELECTED_TURKISH_VOICES);
}

export function getVoiceBySlug(slug: string) {
  const voiceKey = Object.keys(SELECTED_TURKISH_VOICES).find(key => 
    SELECTED_TURKISH_VOICES[key as keyof typeof SELECTED_TURKISH_VOICES].name.toLowerCase().replace(/\s/g, '-') === slug
  );
  return voiceKey ? SELECTED_TURKISH_VOICES[voiceKey as keyof typeof SELECTED_TURKISH_VOICES] : null;
}

export function getVoiceById(voiceId: string) {
  return Object.values(SELECTED_TURKISH_VOICES).find(voice => voice.id === voiceId) || null;
}

// Enhanced speak function with voice selection
export async function speakWithVoice(
  text: string, 
  voiceId: string,
  type: 'letter' | 'word' | 'sentence' | 'celebration' = 'sentence'
): Promise<void> {
  return elevenLabsClient.speak(text, type, voiceId);
}

// React Hook for easy component integration with multi-voice support
export function useElevenLabs() {
  return {
    speak: elevenLabsClient.speak.bind(elevenLabsClient),
    speakWithVoice: speakWithVoice,
    textToSpeech: elevenLabsClient.textToSpeech.bind(elevenLabsClient),
    getVoices: elevenLabsClient.getVoices.bind(elevenLabsClient),
    getSelectedTurkishVoices: getSelectedTurkishVoices,
    getVoiceBySlug: getVoiceBySlug,
    getVoiceById: getVoiceById,
    testVoice: elevenLabsClient.testVoice.bind(elevenLabsClient),
    getApiStatus: elevenLabsClient.getApiStatus.bind(elevenLabsClient),
    clearCache: elevenLabsClient.clearCache.bind(elevenLabsClient),
    stopCurrentAudio: elevenLabsClient.stopCurrentAudio.bind(elevenLabsClient),
    getTestTexts: getTestTexts
  };
}

/**
 * Test metinleri saƒülar - admin panel i√ßin
 * T√ºrk√ße karakterleri ve farklƒ± zorluk seviyelerini test etmek i√ßin
 */
export function getTestTexts() {
  return {
    letter: [
      'A', 'E', 'I', 'ƒ∞', 'O', '√ñ', 'U', '√ú', // Sesli harfler
      'B', 'C', '√á', 'D', 'F', 'G', 'ƒû', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'R', 'S', '≈û', 'T', 'V', 'Y', 'Z' // Sessiz harfler
    ],
    word: [
      'elma', 'armut', '√ßilek', '√ºz√ºm', '≈üeftali', // Meyveler (T√ºrk√ße karakterli)
      'kedi', 'k√∂pek', 'ku≈ü', 'balƒ±k', 'k√∂pekbalƒ±ƒüƒ±', // Hayvanlar
      'ev', 'okul', '≈üehir', 'k√∂y', '√ºlke', // Yerler
      'anne', 'baba', '√ßocuk', '√∂ƒüretmen', '√∂ƒürenci', // ƒ∞nsanlar
      'g√ºne≈ü', 'ay', 'yƒ±ldƒ±z', 'g√∂ky√ºz√º', 'deniz' // Doƒüa
    ],
    sentence: [
      'Merhaba! Nasƒ±lsƒ±n?',
      'Bug√ºn hava √ßok g√ºzel.',
      'T√ºrk√ße √∂ƒürenmek √ßok eƒülenceli.',
      'Kƒ±vƒ±lcƒ±m platformu √ßocuklar i√ßin harika.',
      'Ses teknolojisi √ßok geli≈ümi≈ü.',
      'Bu c√ºmle T√ºrk√ße karakterleri test ediyor: √ßƒüƒ±√∂≈ü√º.',
      'ElevenLabs API\'si m√ºkemmel √ßalƒ±≈üƒ±yor.',
      'Otizmli √ßocuklar i√ßin √∂zel tasarlandƒ±k.',
      'Sesli okuma √ßok √∂nemli bir beceri.',
      'Yapay zeka ile √∂ƒürenme daha etkili.'
    ],
    celebration: [
      'Aferin! √áok g√ºzel yaptƒ±n!',
      'Harikasƒ±n! B√∂yle devam et!',
      'S√ºpersin! Tebrikler!',
      'Bravo! M√ºkemmel bir ba≈üarƒ±!',
      'Yaaay! Sen bir ≈üampiyonsun!',
      'Tebrikler! √áok ba≈üarƒ±lƒ±sƒ±n!',
      'Muhte≈üem! Gurur duyuyorum!',
      'ƒ∞nanƒ±lmaz! B√∂yle devam!',
      'Fantastik! Sen harikasƒ±n!',
      'Olaƒüan√ºst√º! √áok yeteneklisin!'
    ]
  };
}  