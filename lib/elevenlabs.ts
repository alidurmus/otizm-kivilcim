// ElevenLabs Client-Side Integration (Server Proxy Only)
// Uses Next.js API routes for secure server-side processing
// with Static Audio Files fallback for better performance

import { getStaticAudioPath, hasStaticAudio, turkishToFilename } from './audio-constants';

// Error classes for better error handling
class ElevenLabsAPIError extends Error {
  constructor(message: string, public readonly status: number, public readonly responseText?: string) {
    super(message);
    this.name = 'ElevenLabsAPIError';
  }
}

class ElevenLabsPlaybackError extends Error {
  constructor(message: string, public readonly audioUrl?: string) {
    super(message);
    this.name = 'ElevenLabsPlaybackError';
  }
}

// T√ºrk√ße Bayan Ses K√ºt√ºphanesi - Otizm dostu ses se√ßenekleri
export const TURKISH_FEMALE_VOICES = {
  bella: {
    id: 'EXAVITQu4vr4xnSDxMaL',
    name: 'Bella',
    description: 'Nazik ve sakin bayan ses - harf √∂ƒürenme i√ßin ideal',
    language: 'tr',
    gender: 'female',
    age: 'adult',
    traits: ['calm', 'clear', 'gentle'],
    bestFor: ['letters', 'words', 'instructions']
  },
  rachel: {
    id: '21m00Tcm4TlvDq8ikWAM',
    name: 'Rachel',
    description: 'Profesyonel ve g√ºven verici bayan ses',
    language: 'tr',
    gender: 'female', 
    age: 'adult',
    traits: ['professional', 'trustworthy', 'clear'],
    bestFor: ['sentences', 'stories', 'explanations']
  },
  domi: {
    id: 'AZnzlk1XvdvUeBnXmlld', 
    name: 'Domi',
    description: 'Gen√ß ve arkada≈ü canlƒ±sƒ± bayan ses',
    language: 'tr',
    gender: 'female',
    age: 'young',
    traits: ['friendly', 'energetic', 'approachable'],
    bestFor: ['games', 'encouragement', 'social']
  },
  elli: {
    id: 'MF3mGyEYCl7XYWbV9V6O',
    name: 'Elli',
    description: 'Enerjik ve kutlayƒ±cƒ± bayan ses',
    language: 'tr',
    gender: 'female',
    age: 'adult',
    traits: ['energetic', 'celebrating', 'motivating'],
    bestFor: ['celebrations', 'achievements', 'rewards']
  },
  sarah: {
    id: 'EaWgGVAA2Kzl8LLxQN8D',
    name: 'Sarah',
    description: '√áok sakin ve rahatlatƒ±cƒ± bayan ses',
    language: 'tr',
    gender: 'female',
    age: 'adult',
    traits: ['very_calm', 'soothing', 'therapeutic'],
    bestFor: ['relaxation', 'sensitive_content', 'therapy']
  }
};

// T√ºrk√ße Erkek Ses K√ºt√ºphanesi - Otizm dostu ses se√ßenekleri
export const TURKISH_MALE_VOICES = {
  adam: {
    id: 'pNInz6obpgDQGcFmaJgB',
    name: 'Adam',
    description: 'Sakin ve a√ßƒ±k erkek ses - temel √∂ƒürenme i√ßin m√ºkemmel',
    language: 'tr',
    gender: 'male',
    age: 'adult',
    traits: ['calm', 'clear', 'reliable'],
    bestFor: ['instructions', 'basic_learning', 'guidance']
  },
  josh: {
    id: 'VR6AewLTigWG4xSOukaG',
    name: 'Josh',
    description: 'Gen√ß ve eƒülenceli erkek ses - oyunlar i√ßin ideal',
    language: 'tr',
    gender: 'male',
    age: 'young',
    traits: ['playful', 'energetic', 'fun'],
    bestFor: ['games', 'activities', 'entertainment']
  },
  antoni: {
    id: 'ErXwobaYiN019PkySvjV',
    name: 'Antoni',
    description: 'Derin ve g√ºven verici erkek ses - hikayeler i√ßin',
    language: 'tr',
    gender: 'male',
    age: 'adult',
    traits: ['deep', 'trustworthy', 'narrative'],
    bestFor: ['stories', 'reading', 'explanations']
  },
  daniel: {
    id: 'onwK4e9ZLuTAKqWW03F9',
    name: 'Daniel',
    description: 'Profesyonel ve sakin erkek ses',
    language: 'tr',
    gender: 'male',
    age: 'adult', 
    traits: ['professional', 'calm', 'authoritative'],
    bestFor: ['lessons', 'formal_content', 'instructions']
  },
  ethan: {
    id: 'g5CIjZEefAph4nQFvHAz',
    name: 'Ethan',
    description: 'Cesaret verici ve motive edici erkek ses',
    language: 'tr',
    gender: 'male',
    age: 'adult',
    traits: ['encouraging', 'motivating', 'supportive'],
    bestFor: ['encouragement', 'motivation', 'challenges']
  }
};

// Ses tipi i√ßin en uygun T√ºrk√ße bayan sesini √∂ner
export function getRecommendedTurkishVoice(
  type: 'letter' | 'word' | 'sentence' | 'celebration',
  gender: 'male' | 'female' | 'mixed' = 'mixed'
): string {
  const recommendations = {
    letter: {
      male: TURKISH_MALE_VOICES.adam.id,     // Sakin ve a√ßƒ±k
      female: TURKISH_FEMALE_VOICES.bella.id // Nazik ve sakin
    },
    word: {
      male: TURKISH_MALE_VOICES.daniel.id,   // Profesyonel
      female: TURKISH_FEMALE_VOICES.rachel.id // Profesyonel
    },
    sentence: {
      male: TURKISH_MALE_VOICES.antoni.id,   // Derin ve anlatƒ±cƒ±
      female: TURKISH_FEMALE_VOICES.domi.id   // Arkada≈ü canlƒ±sƒ±
    },
    celebration: {
      male: TURKISH_MALE_VOICES.josh.id,     // Eƒülenceli
      female: TURKISH_FEMALE_VOICES.elli.id   // Enerjik
    }
  };

  if (gender === 'mixed') {
    // Karƒ±≈üƒ±k modda, t√ºre g√∂re en uygun sesi se√ß (varsayƒ±lan olarak bayan)
    return recommendations[type].female;
  }

  return recommendations[type][gender];
}

// T√ºm T√ºrk√ße bayan seslerini listele
export function getTurkishFemaleVoices() {
  return Object.values(TURKISH_FEMALE_VOICES);
}

// T√ºm T√ºrk√ße erkek seslerini listele
export function getTurkishMaleVoices() {
  return Object.values(TURKISH_MALE_VOICES);
}

// T√ºm T√ºrk√ße sesleri d√∂nd√ºr√ºr (erkek + bayan)
export function getAllTurkishVoices() {
  return [
    ...getTurkishFemaleVoices(),
    ...getTurkishMaleVoices()
  ];
}

// Client-side ElevenLabs integration using server proxy
class ElevenLabsClient {
  private defaultVoiceId: string = 'EXAVITQu4vr4xnSDxMaL'; // Bella - Turkish-capable female voice
  private cache: Map<string, string> = new Map();

  /**
   * Metni sese √ßevirir ve audio URL d√∂nd√ºr√ºr
   * T√ºrk√ße karakterleri destekler: √ß, ƒü, ƒ±, √∂, ≈ü, √º
   * Server-side API route kullanƒ±r - g√ºvenli ve optimize
   */
  async textToSpeech(
    text: string, 
    type: 'letter' | 'word' | 'sentence' | 'celebration' = 'sentence',
    voiceId?: string
  ): Promise<string> {
    // Input validation with Turkish character support
    if (!text || text.trim().length === 0) {
      throw new Error('Bo≈ü metin ses olarak √ßevrilemez');
    }

    if (text.length > 1000) {
      throw new Error('Metin √ßok uzun (maksimum 1000 karakter)');
    }

    // Turkish character validation
    const turkishPattern = /^[a-zA-Z√ßƒüƒ±√∂≈ü√º√áƒûIƒ∞√ñ≈û√ú\s.,!?-]+$/;
    if (!turkishPattern.test(text)) {
      console.warn('Text contains non-Turkish characters:', text);
    }

    // 1. √ñNCE: Statik ses dosyasƒ±nƒ± kontrol et
    const staticAudioPath = getStaticAudioPath(text, type);
    if (staticAudioPath) {
      console.log(`üìÅ Using static audio file for "${text}":`, staticAudioPath);
      return staticAudioPath;
    }

    // 2. CACHE kontrol√º
    const cacheKey = `${text}-${type}-${voiceId || this.defaultVoiceId}`;
    if (this.cache.has(cacheKey)) {
      console.log(`üíæ Using cached audio for "${text}"`);
      return this.cache.get(cacheKey)!;
    }

    // 3. SERVER-SIDE API route kullan (ElevenLabs SDK proxy)
    try {
      console.log(`ü§ñ Generating audio via ElevenLabs for Turkish text: "${text}"`);
      const response = await fetch('/api/speech', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          text,
          type,
          voiceId: voiceId || this.defaultVoiceId,
          language: 'tr' // Turkish language indicator
        })
      });

      if (!response.ok) {
        const errorText = await response.text().catch(() => 'Unknown error');
        throw new ElevenLabsAPIError(
          `API isteƒüi ba≈üarƒ±sƒ±z: ${response.status}`,
          response.status,
          errorText
        );
      }

      // Convert response to blob and create URL
      const audioBlob = await response.blob();
      const audioUrl = URL.createObjectURL(audioBlob);
      
      // Cache the result
      this.cache.set(cacheKey, audioUrl);
      
      console.log(`‚úÖ Turkish audio generated successfully for: "${text}"`);
      return audioUrl;

    } catch (error) {
      console.error('ElevenLabs API error for Turkish text:', error);
      throw error;
    }
  }

  /**
   * Sesi √ßalar ve cleanup yapar
   * T√ºrk√ße karakterli metinler i√ßin optimize edilmi≈ü
   */
  async speak(
    text: string, 
    type: 'letter' | 'word' | 'sentence' | 'celebration' = 'sentence',
    voiceId?: string
  ): Promise<void> {
    try {
      const audioUrl = await this.textToSpeech(text, type, voiceId);
      
      // Audio element olu≈ütur ve √ßal
      const audio = new Audio(audioUrl);
      audio.volume = 0.8;
      
      return new Promise((resolve, reject) => {
        audio.onended = () => {
          // Cleanup blob URL to prevent memory leaks
          if (audioUrl.startsWith('blob:')) {
            URL.revokeObjectURL(audioUrl);
          }
          resolve();
        };
        
        audio.onerror = () => {
          if (audioUrl.startsWith('blob:')) {
            URL.revokeObjectURL(audioUrl);
          }
          reject(new ElevenLabsPlaybackError(
            `Ses √ßalƒ±namadƒ±: "${text}"`,
            audioUrl
          ));
        };
        
        audio.play().catch(reject);
      });
    } catch (error) {
      throw new ElevenLabsPlaybackError(
        `T√ºrk√ße metin seslendirilirken hata: "${text}"`,
        undefined
      );
    }
  }

  /**
   * Mevcut sesleri listeler
   */
  async getVoices() {
    try {
      const response = await fetch('/api/speech', {
        method: 'GET',
      });

      if (!response.ok) {
        throw new ElevenLabsAPIError(
          'Sesler y√ºklenemedi',
          response.status
        );
      }

      const data = await response.json();
      
      // Extract voices array from the API response
      return data.voices || [];
    } catch (error) {
      console.error('Voices API error:', error);
      throw error;
    }
  }

  /**
   * Ses test fonksiyonu - admin panel i√ßin
   * T√ºrk√ße karakter testleri dahil
   */
  async testVoice(
    text: string,
    voiceId: string,
    type: 'letter' | 'word' | 'sentence' | 'celebration',
    settings?: {
      stability?: number;
      similarityBoost?: number;
      style?: number;
      useSpeakerBoost?: boolean;
    }
  ) {
    try {
      console.log(`üß™ Testing Turkish voice for: "${text}"`);
      const startTime = Date.now();
      
      // Use the main /api/speech endpoint instead of /api/speech/test
      const response = await fetch('/api/speech', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          text,
          voiceId,
          type,
          settings: {
            stability: settings?.stability ?? 0.7,
            similarity_boost: settings?.similarityBoost ?? 0.8,
            style: settings?.style ?? 0.5,
            use_speaker_boost: settings?.useSpeakerBoost ?? true
          },
          language: 'tr'
        })
      });

      const duration = Date.now() - startTime;

      if (!response.ok) {
        const errorText = await response.text();
        return {
          success: false,
          error: `Test failed: ${response.status} - ${errorText}`,
          duration,
          text,
          voiceId,
          turkishCharacterSupport: /[√ßƒüƒ±√∂≈ü√º√áƒûIƒ∞√ñ≈û√ú]/.test(text)
        };
      }

      const audioBlob = await response.blob();
      const audioUrl = URL.createObjectURL(audioBlob);

      return {
        success: true,
        audioUrl,
        duration,
        text,
        voiceId,
        audioSize: audioBlob.size,
        turkishCharacterSupport: /[√ßƒüƒ±√∂≈ü√º√áƒûIƒ∞√ñ≈û√ú]/.test(text),
        filename: turkishToFilename(text) + '.mp3'
      };

    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error',
        text,
        voiceId,
        turkishCharacterSupport: /[√ßƒüƒ±√∂≈ü√º√áƒûIƒ∞√ñ≈û√ú]/.test(text)
      };
    }
  }

  /**
   * API durumunu kontrol eder
   */
  async getApiStatus() {
    try {
      // Use the main /api/speech GET endpoint to check status
      const response = await fetch('/api/speech', {
        method: 'GET',
      });
      
      if (!response.ok) {
        return {
          apiKeyConfigured: false,
          sdkInitialized: false,
          lastTestSuccess: false,
          error: `HTTP ${response.status}`,
          turkish_support: false
        };
      }

      const data = await response.json();
      return {
        apiKeyConfigured: data.configured || false,
        sdkInitialized: data.configured || false,
        lastTestSuccess: true,
        turkish_support: true, // Our implementation supports Turkish
        voices: data.voices || [],
        service: data.service || 'ElevenLabs'
      };
    } catch (error) {
      return {
        apiKeyConfigured: false,
        sdkInitialized: false,
        lastTestSuccess: false,
        error: error instanceof Error ? error.message : 'Network error',
        turkish_support: false
      };
    }
  }

  /**
   * Cache'i temizle
   */
  clearCache() {
    // Revoke all blob URLs to prevent memory leaks
    for (const url of this.cache.values()) {
      if (url.startsWith('blob:')) {
        URL.revokeObjectURL(url);
      }
    }
    this.cache.clear();
    console.log('üßπ ElevenLabs cache cleared');
  }
}

// Global instance - singleton pattern
const elevenLabsClient = new ElevenLabsClient();

// Export client and utility functions
export default elevenLabsClient;
export { ElevenLabsAPIError, ElevenLabsPlaybackError };

// React Hook for easy component integration
export function useElevenLabs() {
  return {
    speak: elevenLabsClient.speak.bind(elevenLabsClient),
    textToSpeech: elevenLabsClient.textToSpeech.bind(elevenLabsClient),
    getVoices: elevenLabsClient.getVoices.bind(elevenLabsClient),
    testVoice: elevenLabsClient.testVoice.bind(elevenLabsClient),
    getApiStatus: elevenLabsClient.getApiStatus.bind(elevenLabsClient),
    clearCache: elevenLabsClient.clearCache.bind(elevenLabsClient),
    getTestTexts: getTestTexts
  };
}

/**
 * Test metinleri saƒülar - admin panel i√ßin
 * T√ºrk√ße karakterleri ve farklƒ± zorluk seviyelerini test etmek i√ßin
 */
export function getTestTexts() {
  return {
    letter: [
      'A', 'E', 'I', 'ƒ∞', 'O', '√ñ', 'U', '√ú', // Sesli harfler
      'B', 'C', '√á', 'D', 'F', 'G', 'ƒû', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'R', 'S', '≈û', 'T', 'V', 'Y', 'Z' // Sessiz harfler
    ],
    word: [
      'elma', 'armut', '√ßilek', '√ºz√ºm', '≈üeftali', // Meyveler (T√ºrk√ße karakterli)
      'kedi', 'k√∂pek', 'ku≈ü', 'balƒ±k', 'k√∂pekbalƒ±ƒüƒ±', // Hayvanlar
      'ev', 'okul', '≈üehir', 'k√∂y', '√ºlke', // Yerler
      'anne', 'baba', '√ßocuk', '√∂ƒüretmen', '√∂ƒürenci', // ƒ∞nsanlar
      'g√ºne≈ü', 'ay', 'yƒ±ldƒ±z', 'g√∂ky√ºz√º', 'deniz' // Doƒüa
    ],
    sentence: [
      'Merhaba! Nasƒ±lsƒ±n?',
      'Bug√ºn hava √ßok g√ºzel.',
      'T√ºrk√ße √∂ƒürenmek √ßok eƒülenceli.',
      'Kƒ±vƒ±lcƒ±m platformu √ßocuklar i√ßin harika.',
      'Ses teknolojisi √ßok geli≈ümi≈ü.',
      'Bu c√ºmle T√ºrk√ße karakterleri test ediyor: √ßƒüƒ±√∂≈ü√º.',
      'ElevenLabs API\'si m√ºkemmel √ßalƒ±≈üƒ±yor.',
      'Otizmli √ßocuklar i√ßin √∂zel tasarlandƒ±k.',
      'Sesli okuma √ßok √∂nemli bir beceri.',
      'Yapay zeka ile √∂ƒürenme daha etkili.'
    ],
    celebration: [
      'Aferin! √áok g√ºzel yaptƒ±n!',
      'Harikasƒ±n! B√∂yle devam et!',
      'S√ºpersin! Tebrikler!',
      'Bravo! M√ºkemmel bir ba≈üarƒ±!',
      'Yaaay! Sen bir ≈üampiyonsun!',
      'Tebrikler! √áok ba≈üarƒ±lƒ±sƒ±n!',
      'Muhte≈üem! Gurur duyuyorum!',
      'ƒ∞nanƒ±lmaz! B√∂yle devam!',
      'Fantastik! Sen harikasƒ±n!',
      'Olaƒüan√ºst√º! √áok yeteneklisin!'
    ]
  };
}  